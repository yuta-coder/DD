import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, f1_score
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('datasets/Social_Network_Ads.csv')
df.head()

# Loading 'Age', 'Estimated_salary' as the features in 'x' and 'Purchased' as the target variable in 'y'
x = df.iloc[:,2:4]
y = df.iloc[:,4]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=42)

print(x_train, y_train)
print(x_test, y_test)
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

scale = StandardScaler()
x_train = scale.fit_transform(x_train)
x_test = scale.transform(x_test)

print(x_train[:3])
print('-'*15)
print(x_test[:3])

lr = LogisticRegression(random_state = 0,solver = 'lbfgs')
lr.fit(x_train,y_train)
pred = lr.predict(x_test)
       
print(x_test[:10])
print('-'*15)
print(pred[:10])

print('Expected Output:',pred[:10])
print('-'*15)
print('Predicted Output:\n',y_test[:10])

matrix = confusion_matrix(y_test,pred,labels = lr.classes_)
print(matrix)

tp, fn, fp, tn = confusion_matrix(y_test,pred,labels=[1,0]).reshape(-1)

conf_matrix = ConfusionMatrixDisplay(confusion_matrix=matrix,display_labels=lr.classes_)
conf_matrix.plot(cmap='Blues')
plt.show()

print(classification_report(y_test,pred))

print('True Positives:',tp)
print('False Negatives:',fn)
print('False Positives:',fp)
print('True Negatives:',tn)

print('Accuracy:',accuracy_score(y_test,pred))
print('Error Rate:',1-accuracy_score(y_test,pred))
print('Precision:',precision_score(y_test,pred))
print('Recall:',recall_score(y_test,pred))

# scatter plot for only x_train and y_train
plt.scatter(x_train[y_train == 0][:, 0], x_train[y_train == 0][:, 1])
plt.scatter(x_train[y_train == 1][:, 0], x_train[y_train == 1][:, 1])
plt.title('Logistic Regression Classification')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend(['Not Purchased', 'Purchased'])
plt.show()
